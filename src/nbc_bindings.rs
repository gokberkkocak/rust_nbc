/* automatically generated by rust-bindgen */

pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __clock_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct veci_t {
    pub size: ::std::os::raw::c_int,
    pub cap: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_veci_t() {
    assert_eq!(
        ::std::mem::size_of::<veci_t>(),
        16usize,
        concat!("Size of: ", stringify!(veci_t))
    );
    assert_eq!(
        ::std::mem::align_of::<veci_t>(),
        8usize,
        concat!("Alignment of ", stringify!(veci_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<veci_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(veci_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<veci_t>())).cap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(veci_t),
            "::",
            stringify!(cap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<veci_t>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(veci_t),
            "::",
            stringify!(ptr)
        )
    );
}
pub type veci = veci_t;
extern "C" {
    pub fn veci_new(v: *mut veci);
}
extern "C" {
    pub fn veci_delete(v: *mut veci);
}
extern "C" {
    pub fn veci_begin(v: *mut veci) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn veci_size(v: *mut veci) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn veci_last(v: *mut veci) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn veci_resize(v: *mut veci, k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn veci_push(v: *mut veci, e: ::std::os::raw::c_int);
}
extern "C" {
    pub fn veci_get(v: *mut veci, index: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vecp_t {
    pub size: ::std::os::raw::c_int,
    pub cap: ::std::os::raw::c_int,
    pub ptr: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_vecp_t() {
    assert_eq!(
        ::std::mem::size_of::<vecp_t>(),
        16usize,
        concat!("Size of: ", stringify!(vecp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vecp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vecp_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vecp_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vecp_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vecp_t>())).cap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vecp_t),
            "::",
            stringify!(cap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vecp_t>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vecp_t),
            "::",
            stringify!(ptr)
        )
    );
}
pub type vecp = vecp_t;
extern "C" {
    pub fn vecp_new(v: *mut vecp);
}
extern "C" {
    pub fn vecp_delete(v: *mut vecp);
}
extern "C" {
    pub fn vecp_begin(v: *mut vecp) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vecp_size(v: *mut vecp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vecp_resize(v: *mut vecp, k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vecp_push(v: *mut vecp, e: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vecp_get_veci(v: *mut vecp, index: ::std::os::raw::c_int) -> *mut veci;
}
pub type bool_ = ::std::os::raw::c_int;
pub type lit = ::std::os::raw::c_int;
pub type lbool = ::std::os::raw::c_char;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub type solver = solver_t;
extern "C" {
    pub fn solver_new() -> *mut solver;
}
extern "C" {
    pub fn solver_delete(s: *mut solver);
}
extern "C" {
    pub fn solver_addclause(s: *mut solver, begin: *mut lit, end: *mut lit) -> bool_;
}
extern "C" {
    pub fn solver_simplify(s: *mut solver) -> bool_;
}
extern "C" {
    pub fn solver_solve(s: *mut solver, begin: *mut lit, end: *mut lit) -> bool_;
}
extern "C" {
    pub fn solver_nvars(s: *mut solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn solver_nclauses(s: *mut solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn solver_nconflicts(s: *mut solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn solver_setnvars(s: *mut solver, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn solver_set_output_and_start(s: *mut solver, outfile: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn solver_set_cnst_output_and_start(s: *mut solver);
}
extern "C" {
    pub fn solver_set_start(s: *mut solver);
}
extern "C" {
    pub fn solver_get_time_elapsed(s: *mut solver) -> f64;
}
extern "C" {
    pub fn solver_clear_assumptions(s: *mut solver);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stats_t {
    pub starts: uint64,
    pub decisions: uint64,
    pub propagations: uint64,
    pub inspects: uint64,
    pub conflicts: uint64,
    pub clauses: uint64,
    pub clauses_literals: uint64,
    pub learnts: uint64,
    pub learnts_literals: uint64,
    pub max_literals: uint64,
    pub tot_literals: uint64,
    pub tot_solutions: uint64,
    pub clk: clock_t,
}
#[test]
fn bindgen_test_layout_stats_t() {
    assert_eq!(
        ::std::mem::size_of::<stats_t>(),
        104usize,
        concat!("Size of: ", stringify!(stats_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stats_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stats_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).starts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(starts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).decisions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(decisions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).propagations as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(propagations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).inspects as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(inspects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).conflicts as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(conflicts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).clauses as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(clauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).clauses_literals as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(clauses_literals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).learnts as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(learnts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).learnts_literals as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(learnts_literals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).max_literals as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(max_literals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).tot_literals as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(tot_literals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).tot_solutions as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(tot_solutions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stats_t>())).clk as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stats_t),
            "::",
            stringify!(clk)
        )
    );
}
pub type stats = stats_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clause_t {
    _unused: [u8; 0],
}
pub type clause = clause_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct solver_t {
    pub size: ::std::os::raw::c_int,
    pub cap: ::std::os::raw::c_int,
    pub qhead: ::std::os::raw::c_int,
    pub qtail: ::std::os::raw::c_int,
    pub lim: ::std::os::raw::c_int,
    pub clauses: vecp,
    pub learnts: vecp,
    pub solutions: vecp,
    pub var_inc: f64,
    pub var_decay: f64,
    pub cla_inc: f32,
    pub cla_decay: f32,
    pub wlists: *mut vecp,
    pub activity: *mut f64,
    pub assigns: *mut lbool,
    pub orderpos: *mut ::std::os::raw::c_int,
    pub reasons: *mut *mut clause,
    pub levels: *mut ::std::os::raw::c_int,
    pub trail: *mut lit,
    pub out: *mut FILE,
    pub sublevels: *mut ::std::os::raw::c_int,
    pub subtrail_lim: veci,
    pub generated_clauses: vecp,
    pub binary: *mut clause,
    pub tags: *mut lbool,
    pub tagged: veci,
    pub stack: veci,
    pub order: veci,
    pub trail_lim: veci,
    pub root_level: ::std::os::raw::c_int,
    pub simpdb_assigns: ::std::os::raw::c_int,
    pub simpdb_props: ::std::os::raw::c_int,
    pub random_seed: f64,
    pub progress_estimate: f64,
    pub verbosity: ::std::os::raw::c_int,
    pub is_k_sols: ::std::os::raw::c_int,
    pub k_sols: ::std::os::raw::c_ulong,
    pub stats: stats,
    pub native_pass_flag: ::std::os::raw::c_int,
    pub native_solution: veci,
    pub assumptions: veci,
}
#[test]
fn bindgen_test_layout_solver_t() {
    assert_eq!(
        ::std::mem::size_of::<solver_t>(),
        472usize,
        concat!("Size of: ", stringify!(solver_t))
    );
    assert_eq!(
        ::std::mem::align_of::<solver_t>(),
        8usize,
        concat!("Alignment of ", stringify!(solver_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).cap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(cap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).qhead as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(qhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).qtail as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(qtail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).lim as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).clauses as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(clauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).learnts as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(learnts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).solutions as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(solutions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).var_inc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(var_inc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).var_decay as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(var_decay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).cla_inc as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(cla_inc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).cla_decay as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(cla_decay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).wlists as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(wlists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).activity as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(activity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).assigns as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(assigns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).orderpos as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(orderpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).reasons as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(reasons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).levels as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(levels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).trail as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(trail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).out as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).sublevels as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(sublevels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).subtrail_lim as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(subtrail_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).generated_clauses as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(generated_clauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).binary as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).tags as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).tagged as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(tagged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).stack as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).order as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).trail_lim as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(trail_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).root_level as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(root_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).simpdb_assigns as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(simpdb_assigns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).simpdb_props as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(simpdb_props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).random_seed as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(random_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).progress_estimate as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(progress_estimate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).verbosity as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(verbosity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).is_k_sols as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(is_k_sols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).k_sols as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(k_sols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).stats as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).native_pass_flag as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(native_pass_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).native_solution as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(native_solution)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<solver_t>())).assumptions as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(solver_t),
            "::",
            stringify!(assumptions)
        )
    );
}
